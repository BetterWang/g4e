import json
import os
import sys
import threading

from g4epy.console_run_sink import ConsoleRunSink
from g4epy.notebook_run_sink import NotebookRunSink
from .test_env import is_notebook
from .runner import run, do_execute, sink_printer, stream_subprocess, console_printer
from .mc import build_file_open_command, detect_mc_type, McFileTypes


class Geant4EicManager(object):
    def __init__(self, **kwargs):
        self.config = {}
        self.user_commands = []    # Direct execution commands user added
        self.commands = []         # Total list of commands, generated by g4epy + user_commands
        self.user_macros = []      # a list of user macroses to run

        self.config.update(kwargs)  # update configs

        sink = self.config.get('sink', 'auto')
        if not sink:
            self.is_notebook = False
            self.sink = ConsoleRunSink()
        else:
            self.is_notebook = is_notebook()
            if (sink == 'auto' and self.is_notebook) or sink == 'notebook':
                self.sink = NotebookRunSink()
            else:
                self.sink = ConsoleRunSink()

        if 'G4E_HOME' not in os.environ:
            self.config['g4e_home'] = ''
            print("WARNING. G4E_HOME environment variable is not set. "
                  "Looking for g4e executable and all resource files in this directory. Which probably is an error")
        else:
            self.config['g4e_home'] = os.environ['G4E_HOME']

            default_build_prefix = os.path.join(os.environ['G4E_HOME'], 'cmake-build-debug')
            self.config['build_prefix'] = self.config.get('build_prefix', default_build_prefix)

            default_path = os.path.join(os.environ['G4E_HOME'], 'cmake-build-debug', 'g4e')
            self.config['executable'] = self.config.get('executable', default_path)

        # set defaults if they are not set for the user
        self.config['executable'] = self.config.get('executable', 'g4e')
        self.runner = None

    def run_cmake_target(self, target, suffix=''):
        """Builds G4E"""
        # Generate execution file

        command = f"cmake --build {self.config['build_prefix']} --target {target} {suffix}"
        
        self.sink.to_show = ["[", "Error", "ERROR", "FATAL"]   # "[" - Cmake like "[9%]"
        self.sink.show_running_command(command)
        run(command, self.sink)

    def build(self, threads='auto'):
        if threads == 'auto':
            import multiprocessing
            threads = multiprocessing.cpu_count()
            if threads > 2:
                threads -= 1
                
        suffix = f' -- -j {threads} -w '

        self.run_cmake_target('g4e', suffix)

    def clean(self):
        self.run_cmake_target('clean')

    def configure(self, build_type='Debug', silence_warnings=True):
        """
        RelwithDebInfo
        :param build_type:
        :param silence_warnings:
        :return:
        """

        flags = ""
        if silence_warnings:
            flags += " -DG4E_SILENCE_WARNINGS=1"

        command = f"cmake {flags} -DCMAKE_BUILD_TYPE={build_type} {self.config['g4e_home']}"
        self.sink.to_show = [">>>", "-- Configuring done", "-- Generating done", "Error"]  # "[" - Cmake like "[9%]"

        self.sink.show_running_command(command)
        run(command, self.sink, cwd=self.config['build_prefix'])

    def _repr_html_(self):
        result_str = f"<strong>g4e</strong><br>"
        result_str += f"<br><strong>G4E_HOME:</strong><br>{self.config['g4e_home']}"
        return result_str
