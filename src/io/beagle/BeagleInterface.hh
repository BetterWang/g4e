//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
/// \brief Definition of the BeagleInterface class
//

#ifndef BEAGLE_INTERFACE_H
#define BEAGLE_INTERFACE_H

#include "G4LorentzVector.hh"
#include "G4VPrimaryGenerator.hh"
#include "G4UnitsTable.hh"
#include "G4SystemOfUnits.hh"
#include "BeagleInterfaceMessenger.hh"


namespace g4e {
class BeagleEventData;
class BeagleReader;

class BeagleInterface : public G4VPrimaryGenerator {

public:
    BeagleInterface();

    ~BeagleInterface() override;

    // The default behavior is that a single Py/LUND event generated by
    // GeneratePythiaEvent() will be converted to G4Event through PyMC2G4().
    void GeneratePrimaryVertex(G4Event *anEvent) override;

    /// Get verbosity level 0 = silent, 1 = some, 2 = debug
    void SetVerboseLevel(G4int i) { fVerbose = i; }

    /// Set verbosity level 0 = silent, 1 = some, 2 = debug
    G4int GetVerboseLevel() const { return fVerbose; };

    /// Returns opened file name (if it was opened)
    G4String GetFileName() const { return fFileName; }

    /// Opens a file for reading
    void Open(const std::string& fileName);

protected:

    // We  have to take care for the position of primaries because
    // primary vertices outside the world volume give rise to G4Exception.
    // If the default implementation is not adequate, an alternative
    // can be implemented in your own class.
    virtual G4bool CheckVertexInsideWorld(const G4ThreeVector &pos) const;


private:
    G4int fVerbose;                         /// verbosity level 0 = silent, 1 = some, 2 = debug
    std::string fFileName;
    g4e::BeagleInterfaceMessenger *fMessenger;
    g4e::BeagleReader* fReader;
};
}
#endif
