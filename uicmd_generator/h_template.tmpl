#compiler-settings
directiveStartToken = ^
commentStartToken = %
#end compiler-settings
%
%
%---CHEETAH SPECIAL SYMBOLS:---
%    % - cheetah comments
%    ^ - cheetah directives
%    $ - cheetah placeholders
%    # - C++ preprocessor
%   // - C++ comments
%
%
^import avr_naming_helper
%
//This file is auto generated by PythonGenerator program
#ifndef ${OutputFileName}_header
#define ${OutputFileName}_header

#include "Global.h"
#include <avr/sfr_defs.h>

/**
 * \brief Парсинг запросов конфигурации протокола
 *
 *  Эта функция ищет и парсит запрос из протокола обмена.
 *  Если запрос соответствовал одной из фукнции устновки или чтения параметра,
 *  возвращает TRUE и создает соответствующий Response
 *  если ни один из запросов не найден, возвращается FALSE
 *
 * \example
 * Glb_Config_ProtocolParse("DCFGAS", responseBuffer) //Вернет TRUE, responseBuffer == "DCFGAS 50 "
 *
 */
bool Glb_Config_ProtocolParse(char* requestBuffer, uint8_t requestStartIndex, char* responseBuffer, uint8_t responseStartIndex);

/** \brief Инициализация глобальных... переменных, допустим.... */
void Glb_Config_Init();

/** \brief Функция ОБЯЗАНА быть реализована пользователем. Зовется всегда, когда необходимо обновить конфигурацию. */
extern void Glb_Config_OnUpdate();

^for $item in $Items
^set $avrType = avr_naming_helper.get_avr_value_type($item.ValueType)
^set $isArray = avr_naming_helper.is_array($item.ValueType)

/**$item.Description */
void Glb_Config_${item.Category}_Init${item.BaseName}();
^if $isArray
void Glb_Config_${item.Category}_Set${item.BaseName}($avrType *value);
void Glb_Config_${item.Category}_Get${item.BaseName}($avrType *destination);
^else
void Glb_Config_${item.Category}_Set${item.BaseName}($avrType value);
$avrType Glb_Config_${item.Category}_Get${item.BaseName}();
^end if

^end for

#endif //ifndef header log